#!/bin/bash
#
# SCRIPT: cscp - cluster scp command
#
# HISTORY:      04/10/2020 - Created - Greg Palmer
#
# NOTES:        BEFORE USE:
#
#               1) Setup the servers for passwordless SSH with the cssh command:
#                  ./cssh --setup # Use the cssh command to setup, not this command
#
#               2) Modify these cluster node hostname templates and
#                  use the [] characters as template variables
#                  Examples: c1dn[]   -> evaluates to: c1dn1 
#                            c1nn[]   -> evaluates to: c1nn1 
#

SSH_KEY=$HOME/.ssh/id_rsa_cssh

THIS_HOSTNAME=$(echo $HOSTNAME | cut -d '.' -f 1)

EDGE_NODES_HOSTNAME_TEMPLATE="c1en[]"
NUM_EDGE_NODES=1

NAME_NODES_HOSTNAME_TEMPLATE="c1nn[]"
NUM_NAME_NODES=3

DATA_NODES_HOSTNAME_TEMPLATE="c1dn[]"
NUM_DATA_NODES=5

#
#

# create list of edge nodes i.e. c1en1 c1en2 
for (( n=1; n<=$NUM_EDGE_NODES; n++ ))
do
    next_num="${n}"
    edge_nodes="$edge_nodes ${EDGE_NODES_HOSTNAME_TEMPLATE/\[\]/$next_num}"
done

# create list of name nodes i.e. c1nn1 c1nn2 
for (( n=1; n<=$NUM_NAME_NODES; n++ ))
do
    next_num="${n}"
    name_nodes="$name_nodes ${NAME_NODES_HOSTNAME_TEMPLATE/\[\]/$next_num}"
done

# create list of data nodes i.e. c1dn1 c1dn2 c1dn3
for (( n=1; n<=$NUM_DATA_NODES; n++ ))
do
    next_num="${n}"
    data_nodes="$data_nodes ${DATA_NODES_HOSTNAME_TEMPLATE/\[\]/$next_num}"
done

# FUNCTION usage()
function usage {
        echo " Usage: cscp [--help | -e | -n | -d ] <file_path> "
        echo "          Where -e means only copy to edge nodes "
        echo "          Where -n means only copy to name nodes "
        echo "          Where -d means only copy to data nodes "
        echo
        echo "    Examples: cscp /etc/hosts
        echo "              cscp -e /etc/hosts
        echo "              cscp -n /etc/hosts
        echo "              cscp -d /etc/hosts
        echo

        exit
}

if [ $# -eq 0 ]
then
        echo " cscp: No arguments supplied - exiting. "
	echo
        usage
fi

echo

if [ $# -eq 1 ]
then
        # 1 arg supplied, either the --help arg or the remote copy file

        if [ "$1" == "--help" ] || [ "$1" == "-h" ]
        then
		usage

        elif [ "$1" == "--setup" ]
        then
                echo " --setup option specified. "
                echo
		echo " Please use the \"cssh --setup\" command to setup cluster scp access. Exiting."
		echo
		exit -1

	elif [[ "$1" == "-"* ]]
	then
		echo " Unknown argument \"$1\". Exiting"
		echo
		usage
	else
		# Argument is the file to copy
		copy_file=$1
                servers=$(echo $edge_nodes $name_nodes $data_nodes)

		err=""

		# Check if file exists
		if [ ! -f $copy_file ]
		then
			err=" File \"$copy_file\" does not exists. Exiting."
		fi

		# Check if file is a directory (not supported currently)
		if [ -d $copy_file ]
		then
			err=" Directory specified for copy. Not supported at this time. Exiting."
		fi

		if [ "$err" != "" ]
		then
			echo " $err"
			echo
			exit -1
		fi
	fi 
elif [ $# -eq 2 ]
then
        # 2 args supplied, 1 node type spec, 1 file
        if [ "$1" == "-e" ]
        then
                servers=$(echo $edge_nodes)
                copy_file=$2
        elif [ "$1" == "-n" ]
        then
                servers=$(echo $name_nodes)
                copy_file=$2
        elif [ "$1" == "-d" ]
        then
                servers=$(echo $data_nodes)
                copy_file=$2
        else
                echo " cscp: Invalid argument: $1 - exiting."
		echo
                usage
        fi
else
	echo " Incorrect number of arguments."
	echo
	usage
fi

# Execute the Remote Copy command

	file_owner=$(stat -c %U $copy_file)
	file_grp_owner=$(stat -c %G $copy_file)

	# Remove this server's hostname from target servers list
	servers=$(echo $servers | sed "s/$THIS_HOSTNAME//g")

	for host in `echo $servers `
	do
		echo " -- Copying file: $copy_file to host: $host"
		echo

		scp -qp -i $SSH_KEY $copy_file $host:/tmp/cscp_file.tmp
		ssh -n -o BatchMode=yes -o StrictHostKeyChecking=no -q -i $SSH_KEY $host "sudo mv -f /tmp/cscp_file.tmp $copy_file; sudo chown ${file_owner}:${file_grp_owner} $copy_file"
	done

# end of script
